const temp={Array:[],String:""},fn_init=r=>{let e=[];for(let t=0;t<r.length;t++)e[e.length]=r[t];return e},fn_gate=(t,r)=>{if(t===temp.Array)throw new Error("Store initialization was unsuccessful!\nStore must be an array!");r(t)},__body=(t,r,e)=>{if(t){if("string"==typeof t)return e.split(t);if("number"==typeof t)throw new Error("Sperators has not be a number.\nSeparator must be a array");return"array"==typeof t||"object"==typeof t?r(t):t}throw new Error("Sperators has not be empty.\nSeparator must be a array")},__function=(o,i)=>{temp.Array;var t=fn_init(o[0]);fn_gate(t,e=>{let n=e;for(let r=0;r<o[1].length;r++)for(let t=0;t<e.length;t++)o[1][r]===n[t]&&(n[t]="");let r="";for(let t=0;t<n.length;t++)r+=n[t];for(let t=0;t<r.length;t++)i(r[t],t)})},__trim=r=>{if("array"!=typeof r&&"object"!=typeof r)throw new Error("Argument has to be type of array");for(let t=0;t<r.length;t++)r[t]=r[t].trim()},LAYOUT={body:__body,trim:__trim,function:__function};function FutureReplaceMethod(t,r){return[t,r,"Function in development"]}function FutureSplitMethod(r){return LAYOUT.body(r,t=>{let e=[],n="";return LAYOUT.function([this,r],(t,r)=>{n=" "==t||+r==t.length-1?(e.push(n+t),""):n+t}),LAYOUT.trim(e),e},this)}function fn_asArray(){return this}function fn_asString(t){let r="";if(!0===t)for(let t=0;t<this.length;t++)r+=this[t];else for(let t=0;t<this.length;t++)r+=this[t]+" ";return r}Object.prototype.asArray=fn_asArray,Object.prototype.asString=fn_asString,String.prototype.steroid_split=FutureSplitMethod,String.prototype.steroid_replace=FutureReplaceMethod,console.log("Hi my name is some fucking name".steroid_split(["i","m"]).asArray());
//# sourceMappingURL=steroid-js.test.min.map.js